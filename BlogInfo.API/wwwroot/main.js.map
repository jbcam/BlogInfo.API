{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Helpers/ErrorHandler.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth.component.html","webpack:///./src/app/auth/auth.component.scss","webpack:///./src/app/auth/auth.component.ts","webpack:///./src/app/blog-view/blog-view.component.html","webpack:///./src/app/blog-view/blog-view.component.scss","webpack:///./src/app/blog-view/blog-view.component.ts","webpack:///./src/app/models/blog.model.ts","webpack:///./src/app/models/user.model.ts","webpack:///./src/app/new-post/new-post.component.html","webpack:///./src/app/new-post/new-post.component.scss","webpack:///./src/app/new-post/new-post.component.ts","webpack:///./src/app/post-list-item/post-list-item.component.html","webpack:///./src/app/post-list-item/post-list-item.component.scss","webpack:///./src/app/post-list-item/post-list-item.component.ts","webpack:///./src/app/post-list/post-list.component.html","webpack:///./src/app/post-list/post-list.component.scss","webpack:///./src/app/post-list/post-list.component.ts","webpack:///./src/app/services/authentication.service.ts","webpack:///./src/app/services/blogpost.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ErrorHandler {\r\n\r\n  /**\r\n * Handle Http operation that failed.\r\n * Let the app continue.\r\n * @param operation - name of the operation that failed\r\n * @param result - optional value to return as the observable result\r\n */\r\npublic handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      //this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n}\r\n","module.exports = \" <nav class=\\\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"blog\\\">My Blog</a>\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\n    <ul class=\\\"navbar-nav\\\">\\n      <li routerLinkActive=\\\"nav-item active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"blog\\\">Post</a></li>\\n      <li routerLinkActive=\\\"nav-item active\\\"><a class=\\\"nav-link\\\" routerLink=\\\"auth\\\">Login</a></li>\\n    </ul>\\n  </div>\\n</nav>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xs-12\\\">\\n        <router-outlet></router-outlet>\\n      </div>\\n    </div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { BlogPostService } from './services/blogpost.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent{\r\n \r\n  constructor() { }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BlogPostService } from './services/blogpost.service';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthService } from './services/authentication.service';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { PostListComponent } from './post-list/post-list.component';\r\nimport { PostListItemComponent } from './post-list-item/post-list-item.component';\r\nimport { BlogViewComponent } from './blog-view/blog-view.component';\r\nimport { AuthComponent } from './auth/auth.component';\r\nimport { NewPostComponent } from './new-post/new-post.component';\r\nimport { AlertsModule } from 'angular-alert-module';\r\nimport { ErrorHandler } from './Helpers/ErrorHandler';\r\n\r\nconst appRoutes: Routes = [\r\n  { path: 'blog', component: BlogViewComponent },\r\n  { path: 'auth', component: AuthComponent },\r\n  { path: '', component: BlogViewComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PostListComponent,\r\n    PostListItemComponent,\r\n    AuthComponent,\r\n    BlogViewComponent,\r\n    NewPostComponent\r\n  ],\r\n\r\n\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    AlertsModule.forRoot()\r\n  ],\r\n\r\n  providers: [BlogPostService, AuthService,ErrorHandler],\r\n  bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }\r\n","module.exports = \"\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <ul class=\\\"list-group\\\">\\r\\n        <li class=\\\"list-group-item\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <h2>Log In</h2>\\r\\n              <form [formGroup]=\\\"loginForm\\\" *ngIf=\\\"!authStatus\\\" (ngSubmit)=\\\"onSignIn()\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Enter email\\\" formControlName=\\\"email\\\">\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n                </div>\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\r\\n              </form>\\r\\n              <button class=\\\"btn btn-danger\\\" *ngIf=\\\"authStatus\\\" (click)=\\\"onSignOut()\\\">Sign Out</button>\\r\\n              <app-alerts></app-alerts>\\r\\n            </div>\\r\\n          </div>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","module.exports = \".container-fluid {\\n  padding-top: 70px;\\n  width: 50vw; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\nimport { Post } from '../models/blog.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { BlogPostService } from '../services/blogpost.service';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { UserDto } from '../models/user.model';\r\nimport { AlertsService } from 'angular-alert-module';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  authStatus: boolean;\r\n  authStatusSubsription: Subscription;\r\n  loginForm: FormGroup;\r\n\r\n  constructor(private formBuilder: FormBuilder, private authService: AuthService, private router: Router,  private alerts: AlertsService) { }\r\n\r\n  ngOnInit() {\r\n    this.authStatusSubsription = this.authService.authStatusSubject.subscribe(\r\n      (authStatus: boolean) => {\r\n        this.authStatus = authStatus;\r\n        console.log(\"Receive auth subscription: \" + this.authStatus)\r\n      }\r\n    );\r\n    this.authService.emitAuthStatusSubject();\r\n    this.initForm();\r\n  }\r\n\r\n  initForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n\r\n    });\r\n  }\r\n \r\n   ngOnDestroy() {\r\n\r\n    this.authStatusSubsription.unsubscribe();\r\n  }\r\n\r\n  onSignIn() {\r\n    const formValue = this.loginForm.value;\r\n    const userDto = new UserDto(\r\n      formValue['email'],\r\n      formValue['password'],\r\n    );\r\n\r\n    this.authService.signIn(userDto).then(() => {\r\n      this.router.navigate(['blog']);\r\n    },\r\n      () => {\r\n        this.alerts.setMessage('login failed','error');\r\n      }\r\n    );\r\n  }\r\n\r\n  onSignOut() {\r\n    this.authService.signOut();\r\n    this.authService.emitAuthStatusSubject();\r\n  }\r\n\r\n}\r\n","module.exports = \"<app-post-list [posts]=\\\"posts\\\" *ngIf=\\\"!isLoading\\\">\\r\\n</app-post-list>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BlogPostService,  } from '../services/blogpost.service';\r\nimport {  Post } from '../models/blog.model';\r\nimport { AppComponent } from '../app.component';\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-blog-view',\r\n  templateUrl: './blog-view.component.html',\r\n  styleUrls: ['./blog-view.component.scss']\r\n})\r\n\r\nexport class BlogViewComponent implements OnInit {\r\n\r\n  private posts: Post[];\r\n  postsSubsription: Subscription;\r\n  isLoading: boolean = true;\r\n\r\n  constructor(private blogPostService: BlogPostService) { }\r\n\r\n  ngOnInit() {\r\n    this.postsSubsription = this.blogPostService.postsSubject.subscribe(\r\n      (posts: Post[]) => {\r\n        this.posts = posts;\r\n      }\r\n    );\r\n\r\n    this.blogPostService.getBlogPostFromServer().then(() => {\r\n      console.log('isloading = false');\r\n      this.isLoading = false\r\n    }\r\n    );\r\n   \r\n   \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.postsSubsription.unsubscribe();\r\n  }\r\n\r\n\r\n \r\n  \r\n  \r\n}\r\n","export class Post {\r\n\r\n  id: number\r\n  title: string;\r\n  contents: string;\r\n  likes: number;\r\n  createdAt: Date;\r\n\r\n}\r\n\r\nexport class PostDto {\r\n\r\n  title: string;\r\n  contents: string;\r\n\r\n\r\n  constructor(title, contents) {\r\n\r\n    this.title = title;\r\n    this.contents = contents;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n","export class User {\r\n  id: number;\r\n  username: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\n\r\nexport class UserDto {\r\n\r\n  userName: string;\r\n  password: string;\r\n\r\n\r\n  constructor(userName, password) {\r\n\r\n    this.userName = userName;\r\n    this.password = password;\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \"<li class=\\\"list-group-item\\\">\\r\\n  <h2>Add a New Post:</h2>\\r\\n  <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"onSubmitForm()\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"title\\\">Title</label>\\r\\n      <input type=\\\"text\\\" id=\\\"title\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\">\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"contents\\\">Contents</label>\\r\\n      <textarea class=\\\"form-control\\\" id=\\\"contents\\\" rows=\\\"3\\\" formControlName=\\\"contents\\\"></textarea>\\r\\n    </div>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n  </form>\\r\\n</li>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'; \r\nimport { BlogPostService } from '../services/blogpost.service';\r\nimport { PostDto } from '../models/blog.model';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\nselector: 'app-new-post',\r\ntemplateUrl: './new-post.component.html',\r\nstyleUrls: ['./new-post.component.scss']\r\n})\r\nexport class NewPostComponent implements OnInit {\r\n\r\n\r\naddForm: FormGroup;\r\ntestPost = [];\r\n\r\nconstructor(private formBuilder: FormBuilder, private blogPostService: BlogPostService, private router: Router) { }\r\n\r\nngOnInit() {\r\n  this.initForm()\r\n}\r\n\r\ninitForm() {\r\n  this.addForm = this.formBuilder.group({\r\n    title: ['', Validators.required],\r\n    contents: ['', Validators.required],\r\n     \r\n  });\r\n}\r\n\r\nonSubmitForm() {\r\n    const formValue = this.addForm.value;\r\n    const newPostDto = new PostDto(\r\n      formValue['title'],\r\n      formValue['contents'],\r\n    );\r\n  this.blogPostService.addPostToServer(newPostDto);\r\n  this.addForm.reset();\r\n    //this.router.navigate(['blog']);\r\n  }\r\n  \r\n}\r\n","module.exports = \"<li [ngClass]=\\\"{'list-group-item': true, 'list-group-item-success' : post.likes> 0,'list-group-item-danger': post.likes < 0}\\\" *ngIf=\\\"!updateMode\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <h2>{{ post.title }}</h2>\\r\\n      <p>{{ post.contents }}</p>\\r\\n      <span class=\\\"timestamp\\\"> {{ post.createdAt | date: 'short' }}</span>\\r\\n      <button class=\\\"btn btn-success\\\" (click)=\\\"onLike()\\\">Love it!</button>\\r\\n      <button class=\\\"btn btn-danger\\\" (click)=\\\"onDislike()\\\">Don't love it!</button>\\r\\n      <span class=\\\"badge badge-light\\\">{{ post.likes }}</span>\\r\\n      <button class=\\\"btn btn-secondary\\\" (click)=\\\"onDelete()\\\" *ngIf=\\\"authStatus\\\">Delete</button>\\r\\n      <button class=\\\"btn btn-secondary\\\" (click)=\\\"onUpdate()\\\" *ngIf=\\\"authStatus\\\">Update</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</li>\\r\\n<li class=\\\"list-group-item\\\"*ngIf=\\\"updateMode\\\">\\r\\n  <form [formGroup]=\\\"updateForm\\\" (ngSubmit)=\\\"onSaveUpdate()\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"title\\\">Title:</label>\\r\\n      <input type=\\\"text\\\" id=\\\"title\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\">\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"contents\\\">Contents:</label>\\r\\n      <textarea class=\\\"form-control\\\" id=\\\"contents\\\" rows=\\\"5\\\" formControlName=\\\"contents\\\"></textarea>\\r\\n    </div>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n  </form>\\r\\n</li>\\r\\n\\r\\n\\r\\n\"","module.exports = \".timestamp {\\n  color: grey;\\n  margin: auto;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  font-style: italic; }\\n\\n.btn {\\n  margin-right: 5px; }\\n\\n.btn-secondary {\\n  float: right; }\\n\"","import { Component, Input, OnInit} from '@angular/core';\r\nimport { Post, PostDto } from '../models/blog.model';\r\nimport { BlogPostService } from '../services/blogpost.service';\r\nimport { AuthComponent } from '../auth/auth.component';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-post-list-item',\r\n  templateUrl: './post-list-item.component.html',\r\n  styleUrls: ['./post-list-item.component.scss']\r\n})\r\nexport class PostListItemComponent implements OnInit  {\r\n\r\n  @Input() post: Post;\r\n  @Input() authStatus: AuthComponent;\r\n  updateMode: boolean = false;\r\n  updateForm: FormGroup;\r\n\r\n  constructor(private formBuilder: FormBuilder, private blogPostService: BlogPostService) { }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n  }\r\n\r\n  //init update form\r\n  initForm() {\r\n    this.updateForm = this.formBuilder.group({\r\n      title: [this.post.title, Validators.required],\r\n      contents: [this.post.contents, Validators.required]\r\n    })\r\n\r\n  }\r\n\r\n  //Like Button - API call Like\r\n  onLike() {\r\n    this.blogPostService.like(this.post.id);   \r\n  }\r\n\r\n    //DisLike Button - API call Like\r\n  onDislike() {\r\n    this.blogPostService.disLike(this.post.id);\r\n  }\r\n\r\n\r\n    //Update Post Button - to enable update Form view\r\n  onUpdate() {\r\n    this.updateMode = true;\r\n    console.log('Update mode is On')\r\n  }\r\n   \r\n   //Form's update post save button - API call Update Post\r\n  onSaveUpdate() {\r\n    const formValue = this.updateForm.value;\r\n    const updatedPostDto = new PostDto(\r\n      formValue['title'],\r\n      formValue['contents']\r\n    );\r\n    console.log('form content value ' + formValue['contents']);\r\n\r\n    this.blogPostService.updatePostOnServer(this.post.id, updatedPostDto).then(() => {\r\n\r\n      this.updateMode = false;\r\n      console.log('Post id ' + this.post.id + ' was updated succesfully')\r\n\r\n    });\r\n\r\n    \r\n\r\n  }\r\n\r\n  //Delete post Button - API call to delete Post\r\n  onDelete() {\r\n    this.blogPostService.deletePostFromServer(this.post.id);\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <ul class=\\\"list-group\\\">\\r\\n        <app-post-list-item *ngFor=\\\"let post of posts\\\" [post]=\\\"post\\\" [authStatus]=\\\"authStatus\\\">\\r\\n        </app-post-list-item>\\r\\n        <app-new-post  *ngIf=\\\"authStatus\\\"></app-new-post>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \".container {\\n  margin-top: 10%; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Post, PostDto } from '../Models/blog.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../services/authentication.service';\r\nimport { FormGroup, Validators } from '@angular/forms';\r\nimport { BlogPostService } from '../services/blogpost.service';\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  templateUrl: './post-list.component.html',\r\n  styleUrls: ['./post-list.component.scss']\r\n})\r\nexport class PostListComponent implements OnInit {\r\n\r\n \r\n  @Input() posts: Array<Post>;\r\n  authStatus: boolean;\r\n  authStatusSubsription: Subscription;\r\n\r\n  constructor(private authService: AuthService, private blogPostService: BlogPostService) { }\r\n\r\n  ngOnInit() {\r\n    this.authStatusSubsription = this.authService.authStatusSubject.subscribe(\r\n      (authStatus: boolean) => {\r\n        this.authStatus = authStatus;\r\n      }\r\n    );\r\n    this.authService.emitAuthStatusSubject();\r\n    //console.log(this.authStatus);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSubsription.unsubscribe();\r\n  }\r\n}\r\n","import { Subject } from \"rxjs\";\r\nimport { map, catchError } from \"rxjs/operators\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\r\nimport { UserDto } from \"../models/user.model\";\r\nimport { ErrorHandler } from \"../Helpers/ErrorHandler\";\r\n\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    \"Content-Type\": \"application/json\"\r\n  })\r\n};\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n  private authStatus = false;\r\n  authStatusSubject = new Subject<boolean>();\r\n  private url = 'http://localhost:55607/api/users/';\r\n\r\n  emitAuthStatusSubject() {\r\n    this.authStatusSubject.next(this.authStatus);\r\n  }\r\n\r\n  constructor(private httpClient: HttpClient, private errorHandler: ErrorHandler) { }\r\n\r\n\r\n  signIn(userDto: UserDto): Promise<any> {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.httpClient.post<any>(this.url + 'authenticate', userDto, httpOptions)\r\n        .pipe(catchError(this.errorHandler.handleError<any>('login')))\r\n        .subscribe((response) => {\r\n          // login successful if there's a jwt token in the response\r\n          if (response && response.token) {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            localStorage.setItem('currentUser', JSON.stringify(response));\r\n            this.authStatus = true;\r\n            console.log('login sucessful')\r\n            this.emitAuthStatusSubject();\r\n            resolve();\r\n          }\r\n          else {\r\n            reject();\r\n            console.log('login failed')\r\n          }\r\n        },\r\n          (error) => {\r\n            console.log('An error occurred while login: ' + error);\r\n            reject();\r\n          }\r\n        );\r\n    }\r\n    );\r\n  }\r\n\r\n  signOut() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    this.authStatus = false;\r\n    this.emitAuthStatusSubject();\r\n  }\r\n}\r\n","import { Post, PostDto } from '../models/blog.model';\r\nimport { Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { ErrorHandler } from '../Helpers/ErrorHandler';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    \"Content-Type\": \"application/json\"\r\n  })\r\n};\r\n\r\n@Injectable()\r\nexport class BlogPostService {\r\n\r\n  private url = 'http://localhost:55607/api/blogposts/';\r\n  private posts: Post[];\r\n  postsSubject = new Subject<Post[]>();\r\n\r\n  //construction\r\n  constructor(private httpClient: HttpClient, private router: Router, private errorHandler: ErrorHandler) { }\r\n\r\n  //Post updates on new posts added\r\n  emitPostsSubject(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.postsSubject.next(this.posts.slice());\r\n      resolve();\r\n    }\r\n    );\r\n  }\r\n\r\n  getBlogPostFromServer(): Promise<any> {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.httpClient\r\n        .get<Array<Post>>(this.url)\r\n        .subscribe((response) => {\r\n          this.posts = response;\r\n          console.log('Get Post Response: ' + response)\r\n          this.emitPostsSubject().then(() => {\r\n            //console.log('emitPostSubeject resolve');\r\n            resolve();\r\n          }\r\n          )\r\n        },\r\n          (error) => {\r\n            console.log('An error occurred in getPosts : ' + error);\r\n          }\r\n        );\r\n\r\n    }\r\n    );\r\n\r\n  }\r\n\r\n  //add post\r\n  addPostToServer(newPostDto: PostDto) {\r\n    this.httpClient\r\n      .post<Post>(this.url, newPostDto, httpOptions)\r\n      .pipe(catchError(this.errorHandler.handleError<Post>('addPost')))\r\n      .subscribe((response) => {\r\n        this.posts.push(response);\r\n        console.log('Get Post Response: ' + response)\r\n        this.emitPostsSubject()\r\n        //this.router.navigate(['blog']);\r\n      },\r\n        (error) => {\r\n          console.log('An error occurred while saving Post : ' + error);\r\n        }\r\n      );\r\n  }\r\n\r\n  //update post\r\n  updatePostOnServer(id, updatedPostDto: PostDto) {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient\r\n        .put<Post>(this.url + id, updatedPostDto, httpOptions)\r\n        .pipe(catchError(this.errorHandler.handleError<Post>('addPost')))\r\n        .subscribe((response) => {\r\n          var index = this.posts.findIndex(x => x.id = id);\r\n          if (index !== -1) {\r\n            this.posts[index] = response;\r\n          } else console.log(\"Can't find post in the list\" + response);\r\n\r\n          this.emitPostsSubject().then(() => {\r\n            resolve();\r\n          });\r\n\r\n        },\r\n          (error) => {\r\n            console.log('An error occurred while updating Post : ' + error);\r\n          }\r\n        );\r\n    });\r\n  }\r\n\r\n  //delete post\r\n  deletePostFromServer(id: number) {\r\n    this.httpClient\r\n      .delete(this.url + id, httpOptions)\r\n      .pipe(\r\n        catchError(this.errorHandler.handleError('deletePost'))\r\n      )\r\n      .subscribe(() => {\r\n        this.posts = this.posts.filter(x => x.id != id);\r\n        console.log(this.posts)\r\n        console.log('Post id ' + id + ' was deleted')\r\n        this.emitPostsSubject()\r\n        //this.router.navigate(['blog']);\r\n      },\r\n        (error) => {\r\n          console.log('An error occurred while deleting Post ' + id + ' : ' + error);\r\n        }\r\n      );\r\n  }\r\n  like(id) {\r\n\r\n    this.httpClient\r\n      .get(this.url + 'like/' + id)\r\n      .subscribe(() => {\r\n        this.posts.find(x => x.id == id).likes++\r\n        console.log('Like incremented')\r\n        this.emitPostsSubject()\r\n      },\r\n        (error) => {\r\n          console.log('Like failed : ' + error);\r\n        }\r\n      )\r\n\r\n  }\r\n\r\n  disLike(id) {\r\n\r\n    this.httpClient\r\n      .get(this.url + 'dislike/' + id)\r\n      .subscribe(() => {\r\n        this.posts.find(x => x.id == id).likes--\r\n        console.log('Like decremented')\r\n        this.emitPostsSubject()\r\n      },\r\n        (error) => {\r\n          console.log('DisLike failed : ' + error);\r\n        }\r\n      )\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}